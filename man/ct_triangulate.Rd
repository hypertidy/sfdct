% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sfct.R
\name{ct_triangulate}
\alias{ct_triangulate}
\alias{ct_triangulate.sf}
\alias{ct_triangulate.sfg}
\title{Constrained Delaunay Triangulation}
\usage{
ct_triangulate(x, ...)

\method{ct_triangulate}{sfg}(x, convex = FALSE, ...)

\method{ct_triangulate}{sf}(x, convex = FALSE, ...)
}
\arguments{
\item{x}{simple feature geometry or data frame}

\item{...}{arguments for methods}

\item{convex}{drop triangles that fall "outside" i.e. "holes" and non-convex regions, \code{FALSE} by default}
}
\value{
simple feature column or data frame
}
\description{
Triangulate simple features including the input edges as constraints, rather than
being bounded to the convex hull.
}
\details{
This is not a Delaunay Triangulation, but is "mostly-Delaunay". All POLYGON, LINESTRING, MULTIPOLYGON and MULTILINESTRING inputs
are broken down into line segments that are included in the mesh. Holes are removed
by default, but can be retained with the \code{convex} argument.

The triangles are collected as POLYGONs within a GEOMETRYCOLLECTION, and in the case of an `sf` object
it's returned within the original input data frame.

There's no way currently to retain the set of shared vertices, or the segment or
the triangle indices.
}
\note{
GEOMETRYCOLLECTION as input is not yet supported.
}
\examples{
nc = st_read(system.file("shape/nc.shp", package="sf"))
nc_triangles <- ct_triangulate(nc[, "NAME"])
plot(nc[, "NAME"])
plot(nc_triangles, add = TRUE, col = NA, lty = "dotted")
idx <- c(4, 5, 6, 7, 8, 20, 21)
op <- par(mfrow = c(2, 1))
plot(st_triangulate(nc[idx, "NAME"]), col = "grey")
plot(ct_triangulate(nc[idx, "NAME"]))
par(op)
\dontrun{
  library(rworldmap)
  data(countriesLow)
  sworld <- st_as_sf(countriesLow)
  sworld <- sworld[sworld$SOVEREIGNT \%in\%  c("Indonesia", "Papua New Guinea", "New Zealand", "Australia"), ]
  ## the centre of the universe
  sworld <- st_transform(sworld, crs = "+proj=laea +ellps=WGS84 +lat_0=-42 +lon_0=147 +no_defs")

  x <- ct_triangulate(sworld)
  plot(x[, "SOVEREIGNT"], main = "constrained vs convex\\n Delaunay triangulation")
  plot(st_triangulate(sworld), col = sf::sf.colors(nrow(sworld), alpha = 0.3), border = NA, add = TRUE)
}
}

